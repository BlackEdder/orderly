% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/task.R
\name{orderly_task_pack}
\alias{orderly_task_pack}
\alias{orderly_task_run}
\alias{orderly_task_import}
\alias{orderly_task_list}
\title{Pack and run orderly "tasks"}
\usage{
orderly_task_pack(
  path,
  name = NULL,
  parameters = NULL,
  envir = NULL,
  root = NULL,
  locate = NULL,
  message = NULL,
  instance = NULL,
  remote = NULL,
  tags = NULL
)

orderly_task_run(path, workdir = tempfile(), echo = TRUE, envir = NULL)

orderly_task_import(path, root = NULL, locate = NULL)

orderly_task_list(path)
}
\arguments{
\item{path}{A path, whose interpretation depends on the function:

\describe{

\item{\code{orderly_task_pack}}{A directory to save tasks to.  If
  it does not exist it will be created for you.}

\item{\code{orderly_task_run}}{The path to the packed task (a zip
  file created by \code{orderly_task_pack})}

\item{\code{orderly_task_run}}{The path to the run task task (a
  zip file created by \code{orderly_task_run}}

\item{\code{orderly_task_list}}{The path to a directory that might
  contain either incomplete or complete tasks (created by either
  \code{orderly_task_pack} or \code{orderly_task_run})}

}}

\item{name}{Name of the report to run (see
\code{\link{orderly_list}}).  A leading \code{src/} will be
removed if provided, allowing easier use of autocomplete.
Alternatively, the default of \code{NULL} is useful if you have
already set the working directory to be the source directory.}

\item{parameters}{Parameters passed to the report. A named list of
parameters declared in the \code{orderly.yml}.  Each parameter
must be a scalar character, numeric, integer or logical.}

\item{envir}{The parent of the environment that will be used to
evaluate the report script; by default a new environment will be
made with the global environment as the parent.}

\item{root}{The path to an orderly root directory, or \code{NULL}
(the default) to search for one from the current working
directory if \code{locate} is \code{TRUE}.}

\item{locate}{Logical, indicating if the configuration should be
searched for.  If \code{TRUE} and \code{config} is not given,
then orderly looks in the working directory and up through its
parents until it finds an \code{orderly_config.yml} file.}

\item{message}{An optional character string containing a message
explaining why the report was run}

\item{instance}{Select instance of the source database to be used,
where multiple instances are configured.  Use a single
\emph{unnamed} character string to indicate an instance to
match.  If given, then this name must be present in all
databases where instances are listed in
\code{orderly_config.yml}, and will be ignored by all database
where instances are not given.  See the "orderly" vignette for
further information.}

\item{remote}{Remote to use to resolve dependencies.  Use this in
order to run a report with the same dependencies as are
available on a remote server, particularly when using \code{id =
"latest"}.  Note that this is not the same as running
\code{\link{orderly_pull_dependencies}}, then \code{orderly_run}
with \code{remote = NULL}, as the pull/run approach will use the
latest report in \emph{your} archive but the \code{remote =
"remote"} approach will use the latest approach in the
\emph{remote} archive (which might be less recent).}

\item{tags}{Character vector of tags to add to the report.  Tags
are immutable and cannot be removed once the report is run.
Tags added here will be \emph{in addition} to any tags listed in
the \code{tags:} field in \code{orderly.yml} and must be present
in \code{orderly_config.yml}.}

\item{workdir}{The path in which to run tasks.  If it does not
exist it will be created for you.  The completed task will be
saved in this directory as \code{<id>.zip}.}

\item{echo}{Print the result of running the R code to the console}
}
\value{
For \code{orderly_task_pack} and \code{orderly_task_run},
  a list with elements \code{path} (the pth to the packed task)
  and \code{id} (its orderly id).  For \code{orderly_task_list} a
  data.frame with key information about the tasks (id, name,
  parameters, status, time).  The function
  \code{orderly_task_import} is called for its side effect only
  and does not return anything useful.
}
\description{
Pack up and run orderly tasks to run elsewhere. By using these
functions you can safely copy all requirements of an orderly
report into a portable archive and run them on another machine
(perhaps a cluster or HPC), then import the completed archive into
your orderly tree. There is considerable overhead to using these
functions (mostly due to transport costs) so they are intended
primarily for very computationally demanding patterns.
}
\examples{
path <- orderly::orderly_example("minimal")

# A working directory to export tasks to:
workdir <- tempfile()

# Pack up the "example" report to go:
res <- orderly::orderly_task_pack(workdir, "example", root = path)

# The return value is a list with the id and the path to the zip
# file created:
res

# A list of tasks saved to this directory and their status
orderly::orderly_task_list(workdir)

# Run the task (this would ordinarily be done on another computer)
zip <- orderly::orderly_task_run(res$path, workdir)
zip

# The status has now been updated to reflect the status
orderly::orderly_task_list(workdir)

# We can import this into the orderly tree
orderly::orderly_task_import(zip$path, root = path)

# This has now been included in your orderly archive and the
# workdir can be safely deleted
unlink(workdir, recursive = TRUE)
orderly::orderly_list_archive(path)
}
